# cloudbuild.yaml
# This file defines the continuous integration and deployment pipeline for the Go application.
# It builds a Docker container using a multi-stage Dockerfile and pushes it to Google Artifact Registry.
# This approach delegates the Go compilation to Docker, which is a robust and standard pattern.

steps:
  # 1. Build and tag the Docker container image
  # This single step now handles the entire build process, including Go compilation,
  # as defined in the multi-stage Dockerfile. This avoids issues with the
  # gcr.io/cloud-builders/go builder's workspace detection.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_GCP_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:$SHORT_SHA'
      - '.'
    id: 'Build-Image'

  # 2. Push the Docker image to Google Artifact Registry
  # This step pushes the final, small image created by the multi-stage Dockerfile
  # to the specified Artifact Registry repository.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_GCP_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:$SHORT_SHA'
    id: 'Push-Image'

# Define the image(s) to be pushed to the registry upon successful build.
images:
  - '${_GCP_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:$SHORT_SHA'

# Define substitution variables. These allow for dynamic configuration at build time.
# You can override these values when you start a build.
# _GCP_LOCATION: The GCP region for the Artifact Registry (e.g., 'us-central1').
# _REPOSITORY: The name of your repository in Artifact Registry.
# _IMAGE_NAME: The name of the container image.
substitutions:
  _GCP_LOCATION: 'us-central1'
  _REPOSITORY: 'my-app-repo'
  _IMAGE_NAME: 'go-workflow-dispatcher'

options:
  # Set the logging mode. CLOUD_LOGGING_ONLY sends structured logs to Cloud Logging.
  logging: CLOUD_LOGGING_ONLY
